'''
# Validate the command
                if not command:
                    ssl_client_socket.send(b"Invalid Command: Command is empty.")
                    logging.warning("Empty command received from %s", current_user)
                    command = None
                    continue

                # Split and extract the action
                try:
                    action = command.split()[0]
                except IndexError:
                    ssl_client_socket.send(b"Invalid Command: Unable to parse action.")
                    logging.warning("Malformed command received from %s: %s", current_user, command)
                    continue

                print(f"Received command: {command}")
                logging.info("Received command: %s from %s", command, current_user)


                # Check permissions for the action
                if not check_permissions(current_role, action):
                    ssl_client_socket.send(b"Permission Denied: You do not have permission to perform this action.")
                    logging.warning("Permission denied for %s to perform %s", current_user, action)
                    continue
                
                # The connection between client-server is closed
                if command.lower() == "exit":
                    print("Client closed the connection.")
                    logging.info("Client %s closed the connection", current_user)
                    break

                # The server is shutting down
                elif command.lower() == "shutdown" and current_role == "admin":
                    ssl_client_socket.send(b"Server is shutting down...")
                    logging.info("Server shutdown by %s", current_user)
                    shutdown_flag.set()
                    break


                # The client intends to upload a file to their respective directory
                if action == "upload":
                    # Extract filename
                    filename = command.split()[1]

                    # Receive the file size    
                    file_size = int(ssl_client_socket.recv(1024).decode())
                    ssl_client_socket.send(b"ACK")  # Acknowledge the file size

                        # Receive the file
                    file_path = os.path.join(user_folder, filename)

                    if os.path.exists(file_path):
                        ssl_client_socket.send(b"File already exists!")
                        logging.warning("File %s already exists for user %s", filename, current_user)
                        continue

                    with open(file_path, "wb") as file:
                        received = 0
                        while received < file_size:
                            data = ssl_client_socket.recv(1024)
                            file.write(data)
                            received += len(data)
                    print(f"File {filename} received successfully!")
                    logging.info("File %s received successfully from %s", filename, current_user)

                # The client intends to download a file from their respective directory 
                elif action == "download":

                    # Validate and construct the full file path
                    relative_path = command.split()[1] # User-specified path
                    full_path = os.path.abspath(os.path.join(user_folder, relative_path))

                    # Ensure the path is within the user's folder
                    if not current_role == "admin" and not full_path.startswith(os.path.abspath(user_folder)):
                        ssl_client_socket.send(b"Invalid Command: Unauthorized file access attempt.")
                        logging.warning("Unauthorized file access attempt by %s: %s", current_user, relative_path)
                        continue

                    # Check if the file exists for admins and non-admins
                    if os.path.exists(full_path) and os.path.isfile(full_path):
                        # Send the file size
                        file_size = os.path.getsize(full_path)
                        ssl_client_socket.send(str(file_size).encode())
                        ssl_client_socket.recv(1024) # Wait for the client to acknowledge the file size

                        # Send the file
                        with open(full_path, "rb") as file:
                            for data in file:
                                ssl_client_socket.send(data)
                        print(f"File {relative_path} sent successfully!")
                        logging.info("File %s sent successfully to %s", relative_path, current_user)
                    else:
                        ssl_client_socket.send("File not found!".encode())
                        logging.warning("File %s not found for user %s", relative_path, current_user)

                # The client intends to list the files in their respective directory
                elif action ==  "list":
                    # Send the list of files in the user's folder
                    files = os.listdir(user_folder)

                    if files:
                        file_list = "\n".join(files)
                        ssl_client_socket.send(file_list.encode())
                        logging.info("List of files sent to %s", current_user)
                    else:
                        ssl_client_socket.send(b"No files in your directory.")
                        logging.info("No files in directory for %s", current_user)

                # The client is an admin who intends to delete a specific file in their (for now only their) directory
                elif action == "delete":
                    if current_role == "admin":
                        logging.info("User %s with admin role requested to delete a file", current_user)

                        # Check if a filename parameter was provided
                        parts = command.split(maxsplit=1)
                        if len(parts) < 2:  # If there is no second part, the filename is missing
                            ssl_client_socket.send(b"Invalid Command: Missing filename. Usage: delete <filename>")
                            logging.warning("Invalid delete command by %s: Missing filename", current_user)
                            continue
                        filename = parts[1]
                        file_path = os.path.join(f"ServerFiles/{current_user}", filename)

                        if os.path.exists(file_path):
                            os.remove(file_path)
                            ssl_client_socket.send(f"File '{filename}' deleted successfully.".encode())
                            logging.info("File %s deleted successfully", filename)
                        else:
                            ssl_client_socket.send(b"File not found!")
                            logging.warning("File %s not found for deletion", filename)

                    # Denied Access
                    else:
                        ssl_client_socket.send(b"Access Denied: You do not have permission for this action")
                        logging.warning("User %s attempted an unauthorized action", current_user)
                    
                # Management action to be implemented later
                elif action == "manage":
                    if current_role == "admin":
                        logging.info("User %s with admin role requested to manage files", current_user)
                        ssl_client_socket.send(b"Admin Management Feature Coming Soon")

                    # Denied Access
                    else:
                        ssl_client_socket.send(b"Access Denied: You do not have permission for this action")
                        logging.warning("User %s attempted an unauthorized action", current_user)
            # Command Invalid
                else:
                    ssl_client_socket.send(b"Invalid Command. Try again.")
                    logging.info("User %s attempted an invalid command", current_user)
            # ////////////////// Command processing ////////////////

            if shutdown_flag.is_set():
                break
'''